---
- apt_repository:
    repo: ppa:certbot/certbot

- name: install certbot
  apt:
    name: [certbot, python3-certbot-nginx]
  tags:
    - packages

- stat:
    path: /etc/letsencrypt/live/{{domain}}/fullchain.pem
  register: letsencrypt_fullchain

- stat:
    path: /etc/letsencrypt/live/{{frontend_domain}}/fullchain.pem
  register: letsencrypt_fullchain_frontend_domain
  when: frontend_domain is defined

- name: stop nginx
  systemd:
    state: stopped
    name: nginx

- debug:
    msg: certbot --noninteractive -m {{letsencrypt_email}} --agree-tos --standalone --preferred-challenges http certonly -d {{domain}}
    verbosity: 1

- name: generate cert for domain
  command: certbot --noninteractive -m {{letsencrypt_email}} --agree-tos --standalone --preferred-challenges http certonly -d {{domain}}
  when: not letsencrypt_fullchain.stat.exists


- name: generate cert for frontend_domain
  command: certbot --noninteractive -m {{letsencrypt_email}} --agree-tos --standalone --preferred-challenges http certonly -d {{frontend_domain}}
  when: frontend_domain is defined and not letsencrypt_fullchain_frontend_domain.stat.exists


- name: start nginx
  systemd:
    state: started
    name: nginx

- name: list of the .conf files in /etc/letsencrypt/renewal
  raw: find /etc/letsencrypt/renewal -type f -name "*.conf"
  register: certs_configs

- name: set certbot authenticator
  loop: "{{certs_configs.stdout_lines}}"
  lineinfile:
    dest: "{{item}}"
    state: present
    regexp: '^authenticator = '
    line: authenticator = nginx

- name: remove hooks
  loop: "{{certs_configs.stdout_lines}}"
  lineinfile:
    dest: "{{item}}"
    state: absent
    regexp: '_hook = '

- name: set certbot post hook
  loop: "{{certs_configs.stdout_lines}}"
  lineinfile:
    dest: "{{item}}"
    state: present
    regexp: '^post_hook = '
    insertafter: '[renewalparams]'
    line: post_hook = service nginx reload
